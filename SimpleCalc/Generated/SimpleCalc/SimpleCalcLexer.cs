//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./SimpleCalc/SimpleCalc.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


  using AntlrDenter;

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class SimpleCalcLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NL=1, WS=2, LINE_COMMENT=3, INT=4, OP=5;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NL", "WS", "LINE_COMMENT", "INT", "OP"
	};


	  private DenterHelper denter;
	    
	  public override IToken NextToken()
	  {
	      if (denter == null)
	      {
	          denter = DenterHelper.Builder()
	              .Nl(NL)
	              .Indent(SimpleCalcParser.INDENT)
	              .Dedent(SimpleCalcParser.DEDENT)
	              .PullToken(base.NextToken);
	      }

	      return denter.NextToken();
	  }


	public SimpleCalcLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SimpleCalcLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "NL", "WS", "LINE_COMMENT", "INT", "OP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SimpleCalc.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SimpleCalcLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,5,49,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,1,0,3,0,13,8,0,1,
		0,1,0,5,0,17,8,0,10,0,12,0,20,9,0,1,1,4,1,23,8,1,11,1,12,1,24,1,1,1,1,
		1,2,1,2,1,2,1,2,5,2,33,8,2,10,2,12,2,36,9,2,1,2,1,2,1,3,4,3,41,8,3,11,
		3,12,3,42,1,4,4,4,46,8,4,11,4,12,4,47,0,0,5,1,1,3,2,5,3,7,4,9,5,1,0,4,
		2,0,9,9,32,32,2,0,10,10,13,13,1,0,48,57,2,0,65,90,97,122,54,0,1,1,0,0,
		0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,1,12,1,0,0,0,3,22,1,
		0,0,0,5,28,1,0,0,0,7,40,1,0,0,0,9,45,1,0,0,0,11,13,5,13,0,0,12,11,1,0,
		0,0,12,13,1,0,0,0,13,14,1,0,0,0,14,18,5,10,0,0,15,17,5,32,0,0,16,15,1,
		0,0,0,17,20,1,0,0,0,18,16,1,0,0,0,18,19,1,0,0,0,19,2,1,0,0,0,20,18,1,0,
		0,0,21,23,7,0,0,0,22,21,1,0,0,0,23,24,1,0,0,0,24,22,1,0,0,0,24,25,1,0,
		0,0,25,26,1,0,0,0,26,27,6,1,0,0,27,4,1,0,0,0,28,29,5,47,0,0,29,30,5,47,
		0,0,30,34,1,0,0,0,31,33,8,1,0,0,32,31,1,0,0,0,33,36,1,0,0,0,34,32,1,0,
		0,0,34,35,1,0,0,0,35,37,1,0,0,0,36,34,1,0,0,0,37,38,6,2,0,0,38,6,1,0,0,
		0,39,41,7,2,0,0,40,39,1,0,0,0,41,42,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,
		0,43,8,1,0,0,0,44,46,7,3,0,0,45,44,1,0,0,0,46,47,1,0,0,0,47,45,1,0,0,0,
		47,48,1,0,0,0,48,10,1,0,0,0,7,0,12,18,24,34,42,47,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
